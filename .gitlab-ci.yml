stages:
  - prepare
  - tests

build-image-ci:
  stage: prepare
  tags:
    - shell-docker
  script:
    - make build-and-publish-ci-image
  retry:
    max: 2
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always

build-image-ci-tests:
  stage: prepare
  tags:
    - shell-docker
  script:
    - make build-and-publish-ci-image-tests
  retry:
    max: 2
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always

build-image-ci-tests-tox:
  stage: prepare
  tags:
    - shell-docker
  script:
    - make build-and-publish-ci-image-tests-tox
  retry:
    max: 2
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $IS_TOX_SCHEDULE_PIPELINE

ci-image:
  stage: prepare
  tags:
    - shell
  script:
    - echo "DOCKER_CI_IMAGE=$(make get_ci_image)" > out.env
    - cat out.env
  artifacts:
    reports:
      dotenv: out.env
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always

ci-image-tests:
  stage: prepare
  tags:
    - shell
  script:
    - echo "DOCKER_CI_IMAGE_TESTS=$(make get_ci_image_tests)" > out_tests.env
    - cat out_tests.env
  artifacts:
    reports:
      dotenv: out_tests.env
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always

ci-image-tests-tox:
  stage: prepare
  tags:
    - shell
  script:
    - echo "DOCKER_CI_IMAGE_TESTS_TOX=$(make get_ci_image_tests_tox)" > out_tests_tox.env
    - cat out_tests_tox.env
  artifacts:
    reports:
      dotenv: out_tests_tox.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $IS_TOX_SCHEDULE_PIPELINE

check-format:
  stage: tests
  image:
    name: ${DOCKER_CI_IMAGE}
  tags:
    - docker
  script:
    - make check-format
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always

tests:
  stage: tests
  image:
    name: ${DOCKER_CI_IMAGE_TESTS}
  tags:
    - docker
  script:
    - make run-tests
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml

tests-dependencie-versions:
  stage: tests
  timeout: 4h
  image:
    name: ${DOCKER_CI_IMAGE_TESTS_TOX}
  tags:
    - docker
  script:
    - make run-tests-dependencie-versions
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $IS_TOX_SCHEDULE_PIPELINE
